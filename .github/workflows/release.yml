name: Release DataWeave Native CLI
on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
jobs:

  # This workflow contains a single job called "build"
  RELEASE_EXTENSION:
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        include:
          - os: ubuntu-latest
            script_name: linux
          - os: macos-latest
            script_name: osx
          - os: windows-latest
            script_name: windows

    runs-on: ${{ matrix.os }}
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
          
      # Read graalvm version
      - name: Read Graalvm version
        run: |
          echo "GRAALVM_VERSION=$(grep graalvmVersion gradle.properties | cut -d '=' -f2)" >> $GITHUB_ENV
        shell: bash
      
      # Setup Graalvm
      - name: Setup Graalvm
        uses: graalvm/setup-graalvm@v1
        with:
          version: ${{env.GRAALVM_VERSION}}
          java-version: '11'
          components: 'native-image'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Guess Extension Version
        run: |
          echo "NATIVE_VERSION=$(echo '${{github.ref}}' | sed -e 's,.*/v\(.*\),\1,')" >> $GITHUB_ENV
        shell: bash
      
      # Runs a single command using the runners shell
      - name: Run Build
        run: |
          ./gradlew build -PnativeVersion=${{env.NATIVE_VERSION}}
        shell: bash
      
      # Generate distro
      - name: Create Distro
        run: ./gradlew native-cli:distro -PnativeVersion=${{env.NATIVE_VERSION}}
        shell: bash

      # Upload the artifact file
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
        if: matrix.os == 'ubuntu-latest'
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: native-cli/build/distributions/native-cli-${{env.NATIVE_VERSION}}-native-distro-${{ matrix.script_name }}.zip
          asset_name: dw-${{env.NATIVE_VERSION}}-${{runner.os}}.zip
          asset_content_type: application/zip

