buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
}

plugins {
//    id 'com.github.johnrengelman.shadow' version '5.2.0'
    id 'application'
    // Apply GraalVM Native Image plugin
    id 'org.graalvm.buildtools.native' version '0.9.5'
}

sourceSets {
    main {
        scala {
            srcDirs = ['src/main/scala', 'build/genresource']
        }
    }
}


mainClassName = 'org.mule.weave.dwnative.cli.DataWeaveCLI'


dependencies {
    compile group: 'org.mule.weave', name: 'runtime', version: weaveVersion
    compile group: 'org.graalvm.sdk', name: 'graal-sdk', version: '1.0.0-rc12'
    compile group: 'org.mule.weave', name: 'core-modules', version: weaveVersion
    compile group: 'org.mule.weave', name: 'yaml-module', version: weaveVersion
    compile group: 'org.mule.weave', name: 'http-module', version: ioVersion
    compile group: 'org.mule.weave', name: 'process-module', version: ioVersion
    compile(group: 'org.mule.weave', name: 'http-netty-module', version: ioVersion) {
        exclude group: 'org.slf4j'
    }
    compile group: 'org.mule.weave', name: 'ndjson-module', version: weaveVersion
    compile group: 'commons-cli', name: 'commons-cli', version: '1.4'
    testCompile group: 'org.scalatest', name: 'scalatest_2.12', version: scalaTestVersion
}

ext {
    aws = [
            accessKey: System.getenv("AWS_ACCESS_KEY_ID"),
            secretKey: System.getenv("AWS_SECRET_KEY")
    ]
}


def genDirectory = new File("$project.buildDir/genresource")


task genVersions() {
    println("Generating Versions File.")
    def componentVersion = new File(genDirectory, "org/mule/weave/v2/version/ComponentVersion.scala")
    def parentFile = componentVersion.getParentFile()
    if (!parentFile.exists()) {
        parentFile.mkdirs()
    }
    final PrintWriter outputPrinter = new PrintWriter(new FileWriter(componentVersion))

    outputPrinter.println("package org.mule.weave.v2.version")
    outputPrinter.println()
    outputPrinter.println("object ComponentVersion {")
    outputPrinter.println("\tval weaveVersion = \"" + weaveVersion + "\"")
    outputPrinter.println("\tval nativeVersion = \"" + nativeVersion + "\"")
    outputPrinter.println("}")
    outputPrinter.close()
}


defaultTasks += genVersions

compileScala {
    dependsOn genVersions
}

//// Merging Service Files
//shadowJar {
//    mergeServiceFiles()
//}


import org.apache.tools.ant.taskdefs.condition.Os

task distro(dependsOn: nativeCompile, type: Zip) {
    classifier = "native-distro-" + getOsName()
    into("libs") {
        from { configurations.runtime.filter { it.getName().contains("ndjson-module") } }
    }
    into("bin") {
        from 'build/native/nativeCompile/'
    }
}


private static String getOsName() {
    String prefix
    if (Os.isFamily(Os.FAMILY_MAC))
        prefix = "osx"
    else if (Os.isFamily(Os.FAMILY_UNIX))
        prefix = "linux"
    else
        prefix = "windows"
    prefix
}
graalvmNative {
    binaries {
        main {
            // Main options
            imageName = 'dw'
            mainClass = 'org.mule.weave.dwnative.cli.DataWeaveCLI'
            debug = true // Determines if debug info should be generated, defaults to false
            verbose = true // Add verbose output, defaults to false
            fallback = false // Sets the fallback mode of native-image, defaults to false

            // Advanced options
            buildArgs.add("-H:+ReportExceptionStackTraces")
            buildArgs.add("--no-fallback")
            buildArgs.add("--allow-incomplete-classpath")
            buildArgs.add("-H:EnableURLProtocols=http,https")
            buildArgs.add("--initialize-at-run-time=" +
                    "io.netty," +
                    "org.asynchttpclient," +
                    "org.mule.weave.v2.module.http.netty.HttpAsyncClientService," +
                    "scala.util.Random," +
                    "org.mule.weave.v2.sdk.SPIBasedModuleLoaderProvider\$")
            buildArgs.add("--initialize-at-build-time=" +
                    "sun.instrument.InstrumentationImpl," +
                    "org.mule.weave.dwnative.initializer.Startup," +
                    "org.mule.weave.dwnative.," +
                    "org.mule.weave.v2.parser.," +
                    "org.mule.weave.v2.codegen.StringCodeWriter," +
                    "org.mule.weave.v2.resources.WeaveResourceLoader\$," +
                    "org.mule.weave.v2.annotations.," +
                    "org.mule.weave.v2.ts.," +
                    "org.mule.weave.v2.scope.," +
                    "org.mule.weave.v2.scope.," +
                    "org.mule.weave.v2.grammar.," +
                    "org.mule.weave.v2.sdk.," +
                    "org.mule.weave.v2.utils.," +
                    "org.mule.weave.v2.versioncheck.," +
                    //Parboiled
                    "scala.," +
                    "org.parboiled2.," +
                    "shapeless.syntax.")

    //For Runtime execution
//            "org.mule.weave.v2.interpreted.,"+
//            "org.mule.weave.v2.model.values.,"
//            "org.mule.weave.v2.model.types.,"
//            "org.mule.weave.v2.core.functions."
//    option "-H:+TraceClassInitialization"
            buildArgs.add("-H:DeadlockWatchdogInterval=1000")
            buildArgs.add("--report-unsupported-elements-at-runtime")
            buildArgs.add("-H:CompilationExpirationPeriod=0")
            buildArgs.add("--trace-object-instantiation=java.util.Random")
            buildArgs.add("-H:+AddAllCharsets")
            buildArgs.add("-H:+IncludeAllLocales")
//    option "-H:+DashboardAll"
//    option "-H:DashboardDump=/Users/mdeachaval/labs/palantir/weave-native-library/native-cli/dump"
//    option "-H:+PrintImageObjectTree"
            buildArgs.add("-J-Xmx6G")
            
            // Development options
            agent = false // Enables the reflection agent. Can be also set on command line using '-Pagent'

            useFatJar = false // Instead of passing each jar individually, builds a fat jar
        }
    }
}
